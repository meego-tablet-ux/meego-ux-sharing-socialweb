/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -i libsocialweb-qt/swclientdbustypes.h -p ../interfaces/collections_interface.h:../interfaces/collections_interface.cpp ../interfaces/collections.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COLLECTIONS_INTERFACE_H_1299697758
#define COLLECTIONS_INTERFACE_H_1299697758

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <libsocialweb-qt/swclientdbustypes.h>

/*
 * Proxy class for interface com.meego.ux.sharing.service.collections
 */
class ComMeegoUxSharingServiceCollectionsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.meego.ux.sharing.service.collections"; }

public:
    ComMeegoUxSharingServiceCollectionsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComMeegoUxSharingServiceCollectionsInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> Create(const QString &collection_name, uint supported_types, const QString &collection_parent, SwParams extra_parameters)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(collection_name) << qVariantFromValue(supported_types) << qVariantFromValue(collection_parent) << qVariantFromValue(extra_parameters);
        return asyncCallWithArgumentList(QLatin1String("Create"), argumentList);
    }

    inline QDBusPendingReply<bool> GetDetails(const QString &collection_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(collection_id);
        return asyncCallWithArgumentList(QLatin1String("GetDetails"), argumentList);
    }

    inline QDBusPendingReply<bool> GetList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetList"), argumentList);
    }

    inline QDBusPendingReply<bool> GetSupportsCollections()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetSupportsCollections"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CollectionCreated(const QString &collID, bool error);
    void DetailsRetrieved(const SwCollectionDetails &collection_details, bool error);
    void ListRetrieved(const ArrayOfSwCollectionDetails &collection_list, bool error);
};

#endif
